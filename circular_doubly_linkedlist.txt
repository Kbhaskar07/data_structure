/*program for Circular doubly linked list. */

#include<stdio.h>
#include<stdlib.h>
typedef struct linkedlist
{
    struct linkedlist *prev;
    int data;
    struct linkedlist *next;
}linked;

//Functions for performing various operations.
linked *insert_at_begin(linked *head);
linked *insert_at_end(linked *head);
linked *insert_at_position(linked *head);
linked *delete_at_end(linked *head);
linked *delete_at_begin(linked *head);
linked *delete_at_position(linked *head);
linked *display_forward(linked *head);
linked *display_backward(linked *head);
linked *search(linked *head);
linked *sort(linked *head);

//Global Variables
linked *newnode=NULL, *temp=NULL, *tail=NULL;
int node_count=0;

//driver program
int main()
{
    linked *head=NULL;
    int choice;
    do
    {
        printf("\nPlease Choose :-\n");
        printf("1. Insert at Beginning.\n2. Insert at End.\n3. Insert at position.\n4. Delete at End.\n5. Delete at Beginning.\n6. Delete at Position.\n7. Display forward.\n8. display backward.\n9. Search.\n10. Sorting.\n11. Exit.\n");
        scanf("%d",&choice);
        switch(choice)
        {
        case 1:
            head=insert_at_begin(head);
            break;
        case 2:
            head=insert_at_end(head);
            break;
        case 3:
            head=insert_at_position(head);
            break;
        case 4:
            head=delete_at_end(head);
            break;
        case 5:
            head=delete_at_begin(head);
            break;
        case 6:
            head=delete_at_position(head);
            break;
        case 7:
            head=display_forward(head);
            break;
        case 8:
            head=display_backward(head);
            break;
        case 9:
            head=search(head);
            break;
        case 10:
            head=sort(head);
            break;
        case 11:
            exit(0);
        default:
                printf("\nPlease choose correct option.");
        }
     }while (1);
    return 0;
}

//Function Definition
linked *insert_at_begin(linked *head)
{
    newnode=(linked *)malloc(sizeof(linked));
    if(newnode==NULL)
    {
        printf("\nMemory not created.");
        return head;
    }
    printf("\nEnter the data : ");
    scanf("%d",&newnode->data);
    if(head==NULL)
    {
        head=newnode;
        newnode->next=head;
        newnode->prev=head;
        tail=newnode;
    }
    else
    {
        newnode->next=head;
        head->prev=newnode;
        newnode->prev=tail;
        tail->next=newnode;
        head=newnode;
    }
    printf("%d inserted successfully.",newnode->data);
    newnode=NULL;
    node_count++;
    return head;
}

linked *insert_at_end(linked *head)
{
    if(head==NULL)
    {
        head=insert_at_begin(head);
        return head;
    }
    newnode=(linked *)malloc(sizeof(linked));
    if(newnode==NULL)
    {
        printf("\nMemory not created.");
        return head;
    }
    printf("\nEnter the data : ");
    scanf("%d",&newnode->data);
    newnode->next=head;
    newnode->prev=tail;
    tail->next=newnode;
    tail=newnode;
    head->prev=tail;
    printf("\n%d inserted Successfully.",newnode->data);
    newnode=NULL;
    node_count++;
    return head;
}

linked *insert_at_position(linked *head)
{
    int pos,count=1;
    printf("\nEnter the position to insert data : ");
    scanf("%d",&pos);
    if(pos<1)
    {
        printf("\nPosition should be greater than 0");
        return head;
    }
    if(pos>(node_count+1))
        {
            printf("\nLinkedlist is shorter than the entered position.");
            return head;
        }
    if(pos==1)
    {
        head=insert_at_begin(head);
        return head;
    }
    if(pos==(node_count+1))
    {
        head=insert_at_end(head);
        return head;
    }
    temp=head;
    while(count!=(pos-1))
    {
        temp=temp->next;
        count++;
    }
    newnode=(linked *)malloc(sizeof(linked));
    if(newnode==NULL)
    {
        printf("\nMemory not created.");
        return head;
    }
    printf("\nEnter the data :");
    scanf("%d",&newnode->data);
    newnode->next=temp->next;
    newnode->prev=temp;
    temp->next=newnode;
    temp=newnode->next;
    temp->prev=newnode;
    printf("\n%d inserted successfully.",newnode->data);
    temp=NULL;
    newnode=NULL;
    node_count++;
    return head;
}

linked *delete_at_end(linked *head)
{
    if(tail==NULL)
    {
        printf("\nLinkedlist is Empty.");
        return head;
    }
    if(node_count==1)
    {
        printf("\n%d is deleted.",head->data);
        head=NULL;
        tail=NULL;
        node_count--;
        return head;
    }
    int count=1;
    temp=head;
    while(count<(node_count-1))
    {
        temp=temp->next;
        count++;
    }
    printf("\n%d is deleted.",tail->data);
    tail=temp;
    temp->next=head;
    head->prev=temp;
    temp=NULL;
    node_count--;
    return head;
}

linked *delete_at_begin(linked *head)
{
    if(head==NULL)
    {
        printf("\nLinkedlist is Empty.");
        return head;
    }
    temp=head;
    printf("\n%d is deleted.",head->data);
    if(head==tail)
    {
        head=NULL;
        tail=NULL;
    }
    else
    {
        temp=temp->next;
        head=temp;
        temp->prev=tail;
        tail->next=head;
    }
    temp=NULL;
    node_count--;
    return head;
}

linked *delete_at_position(linked *head)
{
    if(head==NULL)
    {
        printf("\nLinkedlist is Empty.");
        return head;
    }
    int pos=0,count=1;
    linked *new_temp=NULL;
    printf("\nEnter the Position to delete data : ");
    scanf("%d",&pos);
    if(pos<1)
    {
        printf("\nPosition should be greater then 0");
        return head;
    }
    if(pos>node_count)
    {
        printf("\nLinked list is shorter than the entered position.");
        return head;
    }
    temp=head;
    if(pos==1)
    {
        head=delete_at_begin(head);
        return head;  
    }
    if(pos==node_count)
    {
        head=delete_at_end(head);
        return head;
    }
    while(count<(pos-1))
    {
        temp=temp->next;
        count++;
    }
    new_temp=temp;
    new_temp=new_temp->next;
    temp->next=new_temp->next;
    printf("\n%d is deleted.",new_temp->data);
    new_temp=new_temp->next;
    new_temp->prev=temp;
    temp=NULL;
    new_temp=NULL;
    node_count--;
    return head;
}

linked *display_forward(linked *head)
{
    if(head==NULL)
    {
        printf("\nLinkedlist is Empty.");
        return head;
    }
    temp=head;
    do
    {
        printf("%d\t",temp->data);
        temp=temp->next;
    }while(temp->prev!=tail);
    temp=NULL;
    return head;
}

linked *display_backward(linked *head)
{
    if(head==NULL)
    {
        printf("\nLinkedlist is Empty.");
        return head;
    }
    temp=tail;
    do
    {
        printf("%d\t",temp->data);
        temp=temp->prev;
    }while(temp!=tail);
    temp=NULL;
    return head;
}

linked *search(linked *head)
{
    if(head==NULL)
    {
        printf("\nLinked List is Empty.");
        return head;
    }
    int num=0,pos=0,flag=0;
    printf("Enter the number to search : ");
    scanf("%d",&num);
    temp=head;
    do
    {
        pos++;
        if(temp->data==num)
        {
            flag=1;
            printf("\n%d found at Position %d",num,pos);

        }
        temp=temp->next;  
    }while(temp!=head);
    if(flag==0)
    {
        printf("\n%d not found.",num);
        return head;
    }
    return head;
}

linked *sort(linked *head)
{
    if(head==NULL)
    {
        printf("\nLinked List is empty.");
        return head;
    }
    int temp_data,i=1;
    temp=head;
    linked *next_temp=temp->next;
    if(node_count==1)
    {
        printf("\nSorting done!");
        return head;
    }
    for(i=1;i<=node_count;i++)
    {
        while(next_temp!=head)
        {    
            if(temp->data>next_temp->data)
            {
                temp_data=temp->data;
                temp->data=next_temp->data;
                next_temp->data=temp_data;
            }
            temp=temp->next;
            next_temp=next_temp->next;
        }
        temp=head;
        next_temp=temp->next;
    }
    printf("\nSorting done!");
    return head;
}